Especificações Técnicas e Lógicas do Enigma Hunter

## 1. Visão Geral do Sistema

O Enigma Hunter é um sistema de jogo de investigação que combina elementos físicos (QR codes, tabuleiro, ambientes reais) com um componente digital alimentado por IA. Este documento apresenta as especificações técnicas e a lógica de funcionamento do jogo, servindo como referência para desenvolvimento e implementação.

## 2. Arquitetura do Sistema

### 2.1 Componentes Principais

1. **Backend Python**
   - Framework: Flask/FastAPI
   - Gerenciamento de sessões e jogadores
   - Processamento de lógica de jogo
   - Interface com banco de dados
   - Integração com sistema de IA (Ollama/llama3)

2. **Banco de Dados**
   - Sistema primário: SQLite (desenvolvimento), PostgreSQL (produção)
   - ORM: SQLAlchemy para mapeamento e portabilidade
   - Armazenamento de histórias, progresso, interações

3. **Sistema de IA (Ollama/llama3)**
   - Gerenciamento de diálogos de personagens
   - Geração de descrições ambientais
   - Processamento de interações com objetos
   - Sistema de restrições por nível de conhecimento

4. **Frontend**
   - Interface web responsiva
   - Visualização de inventário, pistas, progresso
   - Processamento de QR codes via câmera
   - Interface de diálogo com personagens

5. **Sistema de QR Codes**
   - Geração de códigos únicos para elementos do jogo
   - Mapeamento para locais, objetos, personagens
   - Sistema de verificação de requisitos

### 2.2 Diagrama de Integração

O sistema funciona como uma aplicação de três camadas:
- Camada de Apresentação (Frontend)
- Camada de Lógica de Negócios (Backend Python)
- Camada de Dados (Banco de Dados + Sistema de IA)

## 3. Especificações Funcionais

### 3.1 Sistema de QR Codes

#### Tipos de QR Code
- **Ambiente**: Entrada em localização (sala, área externa)
- **Área**: Exploração de uma subárea dentro de uma localização
- **Personagem**: Diálogo com NPC específico
- **Objeto**: Exame ou coleta de item
- **Pista**: Descoberta direta de evidência

#### Processamento de QR Code
1. Jogador escaneia QR code via interface
2. Sistema identifica UUID do código
3. Backend consulta tipo, alvo e requisitos de acesso
4. Verifica se jogador atende requisitos (nível, localização atual, itens)
5. Processa ação apropriada (movimentação, diálogo, coleta)
6. Atualiza estado do jogador no banco de dados
7. Retorna resposta contextual gerada pela IA

#### Controle de Acesso
- Verificação de localização atual do jogador
- Checagem de níveis mínimos de exploração
- Verificação de posse de itens necessários
- Validação de histórico de interações prévias

### 3.2 Sistema de Personagens com IA

#### Gerenciamento de Diálogos
1. Recuperação de dados do personagem e seu nível atual
2. Construção de prompt contextual para a IA contendo:
   - Detalhes do personagem (personalidade, aparência)
   - Conhecimento disponível no nível atual
   - Restrições (o que não deve ser revelado)
   - Histórico de conversas anteriores
   - Inputs do jogador
3. Envio do prompt para Ollama/llama3
4. Processamento da resposta (filtragem, verificação de gatilhos)
5. Atualização do histórico de diálogos
6. Verificação de evolução do personagem

#### Evolução de Personagens
- Níveis discretos de conhecimento (tipicamente 0-3)
- Cada nível contém gatilhos específicos para evolução
- Gatilhos podem incluir:
  - Apresentação de evidências específicas
  - Menção de palavras-chave em contexto apropriado
  - Demonstração de conhecimento sobre tópicos específicos
- Verificação de evidência requer:
  - Item específico no inventário do jogador
  - Conhecimento adequado sobre o item
  - Apresentação no contexto correto

#### Sistema de Restrição de Conhecimento
- Personagens têm conhecimento limitado por nível
- Cada nível define o que o personagem pode/não pode revelar
- Instruções específicas para a IA sobre como responder em cada nível
- Comportamento adaptativo (defensivo, aberto, enganoso) conforme contexto

### 3.3 Sistema de Ambientes e Exploração

#### Estrutura de Ambientes
- **Localização**: Ambiente principal (ex: sala, jardim)
  - **Áreas**: Subdivisões da localização (ex: canto da sala, mesa)
    - **Detalhes**: Elementos específicos em áreas (ex: gaveta, quadro)
      - **Pistas**: Evidências que podem ser descobertas

#### Exploração Progressiva
1. Jogador entra em localização via QR code
2. Sistema rastreia localização atual
3. Jogador explora áreas específicas via QR codes
4. Cada exploração incrementa pontos de especialização
5. Ao atingir certos limiares, o nível de exploração aumenta
6. Níveis maiores desbloqueiam:
   - Áreas previamente ocultas
   - Detalhes mais sutis em áreas conhecidas
   - Objetos camuflados ou escondidos
   - Interações com personagens específicos

#### Descrições Geradas por IA
- Prompt inclui detalhes visíveis no nível atual
- IA gera descrições adaptadas ao conhecimento do jogador
- Detalhes revelados progressivamente com evolução
- Ênfase em elementos relevantes para investigação atual

### 3.4 Sistema de Objetos e Inventário

#### Coleta e Exame
1. Jogador escaneia QR code de objeto
2. Sistema verifica requisitos de acesso
3. Objeto é adicionado ao inventário digital
4. Descrição inicial (nível 0) é fornecida
5. Exame posterior do objeto pode revelar mais detalhes

#### Evolução de Objetos
- Objetos têm múltiplos níveis de informação (tipicamente 0-3)
- Evolução ocorre através de:
  - Apresentação a personagens específicos
  - Combinação com outros objetos
  - Exame em locais específicos
  - Descoberta de conhecimento contextual
- Cada nível revela novas informações e pode desbloquear pistas

#### Uso de Objetos como Evidência
- Objetos podem ser apresentados durante diálogos
- Sistema verifica se jogador possui conhecimento adequado
- Personagens podem reagir diferentemente baseado no nível do objeto
- Evidência correta no contexto apropriado pode evoluir personagens

### 3.5 Sistema de Especialização do Jogador

#### Categorias de Especialização
1. **Análise de Evidências**: Habilidade com pistas físicas
2. **Conhecimento Histórico**: Compreensão de eventos passados
3. **Interpretação de Comportamento**: Detecção de mentiras e motivações
4. **Descoberta Ambiental**: Localização de elementos ocultos
5. **Conexão de Informações**: Relacionar pistas e formar conclusões

#### Ganho de Pontos
- Pontos são concedidos por:
  - Exploração de ambientes
  - Interação com objetos
  - Diálogos com personagens
  - Descoberta de pistas
  - Combinação de evidências
- Cada ação confere pontos em categorias específicas
- Ações repetidas não conceden pontos novamente

#### Níveis e Requisitos
- Cada categoria tem níveis (tipicamente 1-3)
- Níveis são definidos por limiares de pontos
- Certas interações requerem níveis mínimos
- Especialização determina acesso a:
  - Diálogos avançados
  - Áreas restritas
  - Detalhes sutis de objetos
  - Opções de investigação especiais

### 3.6 Sistema de Pistas e Teorias

#### Descoberta de Pistas
- Pistas são encontradas através de:
  - Exploração de ambientes
  - Diálogos com personagens
  - Exame de objetos
  - Combinação de evidências
- Cada pista é registrada no inventário digital
- Pistas têm níveis de relevância para solução

#### Formulação de Teorias
- Jogadores podem criar teorias conectando pistas
- Sistema avalia consistência e coerência
- Feedback fornecido sem confirmar solução
- Teorias incompletas podem gerar dicas contextuais

### 3.7 Sistema de Solução e Conclusão

#### Submissão de Solução
- Jogador formula acusação final definindo:
  - Culpado
  - Motivo
  - Método
  - Evidências de suporte
- Solução é avaliada contra critérios pré-definidos
- Avaliação considera evidências descobertas e conexões feitas

#### Múltiplos Finais
- Dependendo da solução e evidências apresentadas:
  - Final completo (solução correta com todas evidências)
  - Final parcial (solução correta com evidências incompletas)
  - Final falho (solução incorreta)
- Conclusão narrativa gerada pela IA baseada na solução

### 3.8 Sistema de Dicas (NOVO)

#### Dicas Progressivas
- Jogadores podem solicitar dicas quando bloqueados
- Dicas fornecidas em níveis de especificidade crescente:
  - Nível 1: Sugestão vaga sobre direção a seguir
  - Nível 2: Indicação mais clara de próximo passo
  - Nível 3: Instrução específica para avançar
- Penalidades ou custos podem ser associados a dicas

#### Dicas Contextuais
- Sistema monitora progresso e tempo sem avanços
- Oferece dicas baseadas na situação atual:
  - Áreas inexploradas
  - Pistas não conectadas
  - Personagens não questionados adequadamente
- IA gera dicas narrativamente apropriadas

### 3.9 Sistema de Feedback e Métricas (NOVO)

#### Métricas de Jogo
- Tempo gasto em diferentes áreas
- Frequência de interações com personagens
- Padrões de exploração
- Taxa de progressão
- Pistas descobertas vs. disponíveis

#### Análise de Comportamento
- Identificação de pontos de bloqueio comuns
- Eficácia de diferentes pistas e personagens
- Correlação entre especialização e progressão
- Padrões de interação com a IA

## 4. Especificações Técnicas

### 4.1 Modelo de Dados

#### Entidades Principais
- **Histórias**: Casos completos com todos elementos
- **Localizações**: Ambientes navegáveis
- **Áreas**: Subdivisões de localizações
- **Personagens**: NPCs com níveis evolutivos
- **Objetos**: Itens coletáveis com múltiplos níveis
- **Pistas**: Evidências descobertas
- **Jogadores**: Usuários do sistema
- **Sessões**: Instâncias de jogo

#### Entidades de Rastreamento
- **Progresso do Jogador**: Estado atual em uma sessão
- **Inventário**: Objetos coletados
- **Diálogos**: Histórico de conversas
- **Especializações**: Níveis de habilidade
- **Teorias**: Tentativas de solução
- **Ações**: Registro de interações

### 4.2 API do Sistema

#### Endpoints Principais
- **/api/qrcode**: Processamento de QR Codes escaneados
- **/api/dialogue**: Interface de diálogo com personagens
- **/api/inventory**: Gerenciamento de inventário
- **/api/exploration**: Sistema de exploração ambiental
- **/api/player**: Gerenciamento de jogador e progresso
- **/api/theories**: Formulação e avaliação de teorias
- **/api/hints**: Sistema de dicas

#### Formatos de Dados
- Requisições e respostas em JSON
- Token JWT para autenticação
- IDs UUID para elementos de jogo
- Timestamps para rastreamento de ações

### 4.3 Integração com Ollama/llama3 (NOVO)

#### API de Prompts
- Endpoint para envio de prompts estruturados
- Sistema de templates com substituição de variáveis
- Mecanismo de controle de contexto e histórico
- Processamento assíncrono para respostas longas

#### Estrutura de Prompts
- **Sistema**: Instruções gerais e configurações
- **Personagem**: Detalhes e restrições específicas
- **Contexto**: Situação atual e histórico relevante
- **Consulta**: Input do jogador e perguntas específicas
- **Controle**: Parâmetros de temperatura, tamanho, etc.

#### Processamento de Respostas
- Filtragem de conteúdo inapropriado
- Verificação de aderência às restrições
- Detecção de gatilhos para evolução
- Formatação para apresentação ao jogador

### 4.4 Processamento de QR Codes

#### Geração
- Códigos únicos para cada elemento
- Parâmetros codificados em URL ou UUID
- Sistema de rastreamento para reuso
- Proteção contra duplicação

#### Escaneamento
- Interface web com acesso à câmera
- Detecção e decodificação em tempo real
- Processamento assíncrono do backend
- Cache de códigos para acesso rápido

## 5. Manual de Uso

### 5.1 Para Jogadores

#### Início do Jogo
1. Acesse a interface web do Enigma Hunter
2. Crie uma conta ou faça login
3. Selecione história disponível
4. Leia briefing inicial com contexto da investigação
5. Escaneie QR code da localização inicial

#### Navegação e Exploração
- Escaneie QR codes para mover-se entre localizações
- Explore áreas de interesse dentro das localizações
- Examine detalhes para descobrir pistas
- Observe seu nível de exploração no painel de progresso

#### Interação com Personagens
- Escaneie QR code do personagem para iniciar diálogo
- Digite perguntas ou tópicos na interface de chat
- Apresente evidências mencionando objetos específicos
- Observe reações e mudanças no comportamento
- Use seu conhecimento para obter novas informações

#### Gerenciamento de Inventário
- Colete objetos escaneando seus QR codes
- Examine objetos para revelar detalhes iniciais
- Interaja com objetos para descobrir mais informações
- Use objetos como evidência em diálogos
- Combine objetos quando apropriado

#### Formulação de Teorias
- Acesse o painel de pistas para revisar descobertas
- Crie conexões entre pistas relacionadas
- Formule teorias sobre aspectos do mistério
- Teste teorias parciais com personagens

#### Solução do Mistério
- Quando confiante, acesse a opção "Apresentar Solução"
- Identifique o culpado, método e motivo
- Selecione evidências que sustentam sua teoria
- Submeta sua solução para avaliação
- Receba feedback e conclusão narrativa

### 5.2 Para Mestres de Jogo

#### Preparação
1. Instale o sistema em servidor local ou na nuvem
2. Configure banco de dados inicial
3. Carregue história desejada
4. Imprima QR codes para elementos físicos
5. Prepare ambiente físico (se aplicável)

#### Monitoramento de Sessão
- Acesse painel de administração
- Visualize progresso de jogadores ativos
- Monitore descobertas e interações
- Observe possíveis pontos de bloqueio

#### Intervenção (se necessário)
- Ative sistema de dicas para jogadores bloqueados
- Ajuste dificuldade de verificações se necessário
- Forneça pistas contextuais adicionais
- Reinicie sessões problemáticas

#### Análise Pós-Jogo
- Revise métricas de jogo para identificar:
  - Pontos de interesse/engajamento
  - Obstáculos comuns
  - Padrões de interação com IA
  - Eficácia das pistas e personagens

## 6. Considerações de Implementação

### 6.1 Desempenho
- Tempos de resposta de geração de IA < 5 segundos
- Cache de descrições comuns para acesso rápido
- Processamento QR code em tempo real
- Otimização de consultas ao banco de dados

### 6.2 Segurança
- Autenticação por token JWT
- Validação de inputs do usuário
- Sanitização de prompts enviados à IA
- Backup regular de dados de progresso

### 6.3 Escalabilidade
- Arquitetura modular para adição de novas histórias
- Sistema de templates para facilitar criação de conteúdo
- API documentada para extensões futuras
- Banco de dados projetado para suportar múltiplas histórias simultâneas

### 6.4 Manutenção
- Logs detalhados de interações
- Monitoramento de uso de recursos
- Backup automático de dados
- Versionamento de histórias e conteúdo

---

Esta especificação fornece um guia abrangente para o desenvolvimento e implementação do sistema Enigma Hunter, cobrindo tanto aspectos técnicos quanto lógicos do jogo. As melhorias sugeridas foram incorporadas, com exceção de recursos de acessibilidade e localização, que foram reservados para desenvolvimentos futuros.